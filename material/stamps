            // G-Matrix
            stmp.write(nodes[0], nodes[0], 1/value);
            stmp.write(nodes[1], nodes[1], 1/value);
            stmp.write(nodes[0], nodes[1], -1/value);
            stmp.write(nodes[1], nodes[0], -1/value);

            // Z-Stamp
            stmp.write(offset, nodes[0], 1);
            stmp.write(nodes[0], offset, 1);
            stmp.write(offset, nodes[1], -1);
            stmp.write(nodes[1], offset, -1);
            stmp.write(offset, offset, -value);

            // Y-Stamp
            value = 1 / value;
            stmp.write(offset, nodes[0], value);
            stmp.write(nodes[0], offset, 1);
            stmp.write(offset, nodes[1], -value);
            stmp.write(nodes[1], offset, -1);
            stmp.write(offset, offset, -1);
            break;
        case ct_inductor: // use an impedance-based approach for inductors, this allows the use of 0 for the inductance
            value = s * value;
            stmp.write(offset, nodes[0], value);
            stmp.write(nodes[0], offset, 1);
            stmp.write(offset, nodes[1], -value);
            stmp.write(nodes[1], offset, -1);
            stmp.write(offset, offset, -1);
            break;
        case ct_capacitor: // use an admittance-based approach for capacitors, this allows the use of 0 for the capacitance
            value = s * value;
            stmp.write(offset, nodes[0], value);
            stmp.write(nodes[0], offset, 1);
            stmp.write(offset, nodes[1], -value);
            stmp.write(nodes[1], offset, -1);
            stmp.write(offset, offset, -1);
            break;
        case ct_voltage_source:
            stmp.write(offset, nodes[0], 1);
            stmp.write(nodes[0], offset, 1);
            stmp.write(offset, nodes[1], -1);
            stmp.write(nodes[1], offset, -1);
            break;
        case ct_opamp:
            stmp.write(offset, nodes[0], 1);
            stmp.write(offset, nodes[1], -1);
            stmp.write(nodes[2], offset, 1);
            //stmp.write(nodes[3], offset, -1); // TODO: use this line for four-terminal (differential) opamps?
            break;
        case ct_voltage_controlled_voltage_source:
            stmp.write(offset, nodes[0], 1);
            stmp.write(nodes[0], offset, 1);
            stmp.write(offset, nodes[1], -1);
            stmp.write(nodes[1], offset, -1);
            stmp.write(offset, nodes[2], -value);
            stmp.write(offset, nodes[3], value);
            break;
        case ct_current_controlled_voltage_source:
            stmp.write(offset, nodes[0],     1);
            stmp.write(nodes[0], offset + 1, 1);
            stmp.write(offset, nodes[1],     -1);
            stmp.write(nodes[1], offset + 1, -1);
            stmp.write(offset + 1, nodes[2], 1);
            stmp.write(nodes[2], offset,     1);
            stmp.write(offset + 1, nodes[3], -1);
            stmp.write(nodes[3], offset,     -1);
            stmp.write(offset, offset, -value);
            break;
        case ct_voltage_controlled_current_source:
            stmp.write(nodes[0], nodes[2], -value);
            stmp.write(nodes[0], nodes[3], +value);
            stmp.write(nodes[1], nodes[2], +value);
            stmp.write(nodes[1], nodes[3], -value);
            break;
        case ct_current_controlled_current_source:
            stmp.write(nodes[0], offset, -value);
            stmp.write(nodes[1], offset,  value);
            stmp.write(offset, nodes[2], 1);
            stmp.write(nodes[2], offset, 1);
            stmp.write(offset, nodes[3], -1);
            stmp.write(nodes[3], offset, -1);
            break;
        case ct_port:
        case ct_current_source:
            // suppress warning
            break;
    }
